// KHAI BÁO MA TRẬN ĐỈNH ĐỈNH
#include <stdio.h>
#define MAX_Vertices 20
#define MAX_Length 20
#define MAX_ELEMENTS 100
typedef struct{
	int A[MAX_Vertices][MAX_Vertices];
	int n;
}Graph;
void init_Graph(Graph *G , int n){
	G->n = n;
	int i,j;
	for(i = 1; i <= n; i++){
		for(j = 1; j <= n ; j++){
			G->A[i][j] = 0;
		}
	}
}
void add_edge(Graph *G, int x,int y){
	G->A[x][y] = 1;
	G->A[y][x] = 1;
}
int adjacent(Graph *G, int x, int y){
	return G->A[x][y] != 0;
}




int degree(Graph *G , int x){
	int i,bac = 0;
	for(i = 1; i <= G->n ; i++){
		if( G->A[i][x] == 1){
			bac++;
		}
	}
	return bac;
}
typedef struct{
	int data[MAX_Length];
	int size;
}List;
void make_null(List *L){
	L->size = 0;
}
void push_back(List *L, int x){
	L->data[L->size] = x;
	L->size++;
}
int element_at(List *L, int i){
	return L->data[i - 1];
}






List neighbors(Graph *G, int x){
	List L;
	make_null(&L);
	int i;
	for(i = 1; i <= G->n ; i++){
		if( G->A[i][x] == 1){
			push_back(&L,i);
		}
	}
	return L;
}
